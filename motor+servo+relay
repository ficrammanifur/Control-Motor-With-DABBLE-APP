#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>
#include <ESP32Servo.h>

// === LED untuk status koneksi ===
#define LED_BUILTIN 2

// === Pin Motor ===
const int in1R = 25;
const int in2R = 26;
const int enR = 33;

const int in1L = 14;
const int in2L = 27;
const int enL = 12;

// === Pin Servo ===
const int SERVO_PIN = 13;    // Servo on pin 13
const int SERVO_KANAN = 40;   // Derajat servo kanan
const int SERVO_KIRI = 180;  // Derajat servo kiri
const int SERVO_DEPAN = 110; // Derajat servo depan
int servoPos = 110;          // Posisi awal servo
bool servoAttached = false;  // Flag untuk memastikan servo ter-attach
bool motorActive = false;    // Flag untuk track status motor
unsigned long lastServoWrite = 0; // Timestamp servo terakhir ditulis

// === Pin Relay ===
#define PUMP_RELAY_PIN 19    // Relay on pin 19, NO, active HIGH

Servo myServo; // Objek servo

// === BLE Variables ===
BLEServer *pServer = NULL;
BLECharacteristic *pTxCharacteristic;
bool deviceConnected = false;
bool oldDeviceConnected = false;
bool lastOButtonState = false; // Track previous state of 'O' button
bool lastTriangleButtonState = false; // Track previous state of Triangle button
bool scanning = false;

#define BLE_NAME "ROBOT-BLE"
#define SERVICE_UUID           "6E400001-B5A3-F393-E0A9-E50E24DCCA9E"
#define CHARACTERISTIC_UUID_RX "6E400002-B5A3-F393-E0A9-E50E24DCCA9E"
#define CHARACTERISTIC_UUID_TX "6E400003-B5A3-F393-E0A9-E50E24DCCA9E"

// === Fungsi Motor ===
void stopMotors();
void moveForward(int speed);
void moveBackward(int speed);
void turnRight(int speed);
void turnLeft(int speed);

// === Fungsi Servo - Perbaikan untuk Voltage Drop ===
void safeServoWrite(int angle) {
  if (servoAttached && angle >= 0 && angle <= 180) {
    // Jika motor sedang aktif, tunda penulisan servo
    if (motorActive) {
      Serial.println("Motor active - servo write delayed");
      return;
    }
    
    myServo.write(angle);
    servoPos = angle;
    lastServoWrite = millis();
    Serial.println("Servo moved to: " + String(angle) + " degrees");
    delay(20); // Tambahkan delay untuk stabilitas
  } else {
    Serial.println("ERROR: Servo not attached or invalid angle: " + String(angle));
  }
}

void maintainServoPosition() {
  // Re-write servo position setiap 100ms jika tidak ada motor yang aktif
  if (servoAttached && !motorActive && !scanning && (millis() - lastServoWrite > 100)) {
    myServo.write(servoPos);
    lastServoWrite = millis();
  }
}

void servoScan() {
  if (!servoAttached) {
    Serial.println("ERROR: Cannot scan - servo not properly attached");
    return;
  }
  
  if (motorActive) {
    Serial.println("Cannot scan - motor is active");
    return;
  }
  
  Serial.println("Starting servo smooth wave sequence");
  scanning = true;

  // Scan ke kiri (40 -> 180)
  for (int pos = SERVO_KANAN; pos <= SERVO_KIRI; pos += 3) { // Lebih cepat untuk menghindari interferensi
    if (motorActive) break; // Stop jika motor aktif
    safeServoWrite(pos);
    delay(20);
  }

  if (!motorActive) delay(200); // Jeda di ujung jika motor tidak aktif

  // Scan ke kanan (180 -> 40)
  for (int pos = SERVO_KIRI; pos >= SERVO_KANAN; pos -= 3) {
    if (motorActive) break; // Stop jika motor aktif
    safeServoWrite(pos);
    delay(20);
  }

  // Kembali ke posisi tengah dengan perlahan
  if (!motorActive) {
    delay(200);
    for (int pos = SERVO_KANAN; pos <= SERVO_DEPAN; pos += 3) {
      if (motorActive) break;
      safeServoWrite(pos);
      delay(20);
    }
  }
  
  Serial.println("Servo scan completed, returned to center: " + String(SERVO_DEPAN));
  scanning = false;
}

// === Callback Saat Koneksi BLE Terhubung / Terputus ===
class MyServerCallbacks : public BLEServerCallbacks {
  void onConnect(BLEServer *pServer) {
    deviceConnected = true;
    digitalWrite(LED_BUILTIN, HIGH);
    Serial.println("BLE Device Connected Successfully");
  }

  void onDisconnect(BLEServer *pServer) {
    deviceConnected = false;
    digitalWrite(LED_BUILTIN, LOW);
    digitalWrite(PUMP_RELAY_PIN, LOW); // Ensure relay is off on disconnect
    Serial.println("BLE Device Disconnected");
  }
};

// === Callback Saat Data Masuk dari Aplikasi ===
class MyCallbacks : public BLECharacteristicCallbacks {
  void onWrite(BLECharacteristic *pCharacteristic) {
    String rxValue = pCharacteristic->getValue(); // Use Arduino String

    // Print received BLE data in hexadecimal
    Serial.print("Received BLE Data: ");
    for (int i = 0; i < rxValue.length(); i++) {
      Serial.print("0x");
      Serial.print((uint8_t)rxValue[i], HEX);
      Serial.print(" ");
    }
    Serial.println();

    if (rxValue.length() >= 7) {
      uint8_t buttons = rxValue[6];  // Byte ke-7 untuk motor
      uint8_t extraButtons = rxValue[5]; // Byte ke-6 untuk tombol O dan Triangle

      Serial.print("Button State (rxValue[6]): 0x");
      Serial.println(buttons, HEX);
      Serial.print("Button State (rxValue[5]): 0x");
      Serial.println(extraButtons, HEX);
      if (rxValue.length() >= 8) {
        Serial.print("rxValue[7]: 0x");
        Serial.println((uint8_t)rxValue[7], HEX);
      }

      // Motor control
      if (buttons & 0x01) {
        moveForward(200);
        Serial.println("Forward");
      } else if (buttons & 0x02) {
        moveBackward(150);
        Serial.println("Backward");
      } else if (buttons & 0x04) {
        turnLeft(150);
        Serial.println("Left");
      } else if (buttons & 0x08) {
        turnRight(150);
        Serial.println("Right");
      } else {
        stopMotors();
        Serial.println("Stop");
      }

      // Servo control saat tombol O (rxValue[5] & 0x08) ditekan
      bool currentOButtonState = (extraButtons & 0x08);
      if (currentOButtonState && !lastOButtonState && !scanning) { // Tambah check !scanning
        servoScan(); // Perform smooth wave sequence
      }
      lastOButtonState = currentOButtonState; // Update button state

      // Relay control saat tombol Triangle (rxValue[5] & 0x04) ditekan
      bool currentTriangleButtonState = (extraButtons & 0x04);
      if (currentTriangleButtonState && !lastTriangleButtonState) { // Detect rising edge
        digitalWrite(PUMP_RELAY_PIN, HIGH);
        Serial.println("Relay ON");
      } else if (!currentTriangleButtonState && lastTriangleButtonState) { // Detect falling edge
        digitalWrite(PUMP_RELAY_PIN, LOW);
        Serial.println("Relay OFF");
      }
      lastTriangleButtonState = currentTriangleButtonState; // Update button state
    }
  }
};

void setup() {
  Serial.begin(115200);
  delay(1000); // Tambahkan delay startup

  // === Setup Pin Motor ===
  pinMode(enR, OUTPUT);
  pinMode(in1R, OUTPUT);
  pinMode(in2R, OUTPUT);
  pinMode(enL, OUTPUT);
  pinMode(in1L, OUTPUT);
  pinMode(in2L, OUTPUT);

  digitalWrite(enR, HIGH);
  digitalWrite(enL, HIGH);

  // === Setup Pin Servo - Perbaikan untuk Power Stability ===
  Serial.println("Initializing servo...");
  
  // Stop semua motor dulu untuk power stability
  stopMotors();
  delay(500);
  
  // Pastikan pin servo tidak konflik dengan PWM motor
  ESP32PWM::allocateTimer(3); // Ubah ke timer 3 untuk menghindari konflik
  myServo.setPeriodHertz(50); // Standar 50Hz untuk servo
  
  // Coba attach servo dengan parameter yang lebih konservatif
  if (myServo.attach(SERVO_PIN, 1000, 2000)) { // Pulse width 1000-2000us
    servoAttached = true;
    Serial.println("Servo attached successfully on pin " + String(SERVO_PIN));
    
    // Set posisi awal dengan delay yang cukup
    delay(200);
    myServo.write(SERVO_DEPAN); // Direct write untuk inisialisasi
    servoPos = SERVO_DEPAN;
    lastServoWrite = millis();
    delay(1000); // Tunggu servo settle
    
    Serial.println("Servo initialized at position: " + String(SERVO_DEPAN));
    
  } else {
    servoAttached = false;
    Serial.println("CRITICAL ERROR: Failed to attach servo on pin " + String(SERVO_PIN));
  }

  // === Setup Pin Relay ===
  pinMode(PUMP_RELAY_PIN, OUTPUT);
  digitalWrite(PUMP_RELAY_PIN, LOW); // Relay off on startup
  Serial.println("Relay initialized to OFF on pin " + String(PUMP_RELAY_PIN));

  // === Setup LED Status Koneksi ===
  pinMode(LED_BUILTIN, OUTPUT);
  digitalWrite(LED_BUILTIN, LOW);

  // === BLE Setup ===
  BLEDevice::init(BLE_NAME);
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());

  BLEService *pService = pServer->createService(SERVICE_UUID);

  pTxCharacteristic = pService->createCharacteristic(
    CHARACTERISTIC_UUID_TX,
    BLECharacteristic::PROPERTY_NOTIFY
  );
  pTxCharacteristic->addDescriptor(new BLE2902());

  BLECharacteristic *pRxCharacteristic = pService->createCharacteristic(
    CHARACTERISTIC_UUID_RX,
    BLECharacteristic::PROPERTY_WRITE
  );
  pRxCharacteristic->setCallbacks(new MyCallbacks());

  pService->start();
  pServer->getAdvertising()->start();

  Serial.println("BLE Ready, waiting for connection...");
  Serial.println("Current servo position: " + String(servoPos));
}

// === LOOP ===
void loop() {
  if (deviceConnected && !oldDeviceConnected) {
    oldDeviceConnected = true;
    Serial.println("BLE Connection Established");
    
    // Reset servo ke posisi tengah saat koneksi terbentuk
    if (servoAttached && !motorActive) {
      safeServoWrite(SERVO_DEPAN);
    }
  }

  if (!deviceConnected && oldDeviceConnected) {
    oldDeviceConnected = false;
    delay(500);
    pServer->startAdvertising();
    stopMotors();
    motorActive = false; // Reset motor flag
    digitalWrite(PUMP_RELAY_PIN, LOW); // Ensure relay is off on disconnect
    
    // Reset servo ke posisi tengah saat koneksi terputus
    if (servoAttached) {
      delay(100); // Tunggu motor stop
      safeServoWrite(SERVO_DEPAN);
    }
    
    Serial.println("BLE Connection Lost, Restarting Advertising...");
  }

  // Maintain servo position jika tidak ada motor yang aktif
  maintainServoPosition();

  delay(10);
}

// === MOTOR CONTROL - Dengan Power Management ===
void stopMotors() {
  digitalWrite(in1R, LOW); digitalWrite(in2R, LOW);
  digitalWrite(in1L, LOW); digitalWrite(in2L, LOW);
  analogWrite(enR, 0);
  analogWrite(enL, 0);
  motorActive = false;
  Serial.println("Motors stopped - servo safe to operate");
}

void moveForward(int speed) {
  motorActive = true;
  digitalWrite(in1R, LOW); digitalWrite(in2R, HIGH);
  digitalWrite(in1L, LOW); digitalWrite(in2L, HIGH);
  analogWrite(enR, speed);
  analogWrite(enL, speed);
}

void moveBackward(int speed) {
  motorActive = true;
  digitalWrite(in1R, HIGH); digitalWrite(in2R, LOW);
  digitalWrite(in1L, HIGH); digitalWrite(in2L, LOW);
  analogWrite(enR, speed);
  analogWrite(enL, speed);
}

void turnRight(int speed) {
  motorActive = true;
  digitalWrite(in1R, HIGH); digitalWrite(in2R, LOW);
  digitalWrite(in1L, LOW);  digitalWrite(in2L, HIGH);
  analogWrite(enR, speed);
  analogWrite(enL, speed);
}

void turnLeft(int speed) {
  motorActive = true;
  digitalWrite(in1R, LOW);  digitalWrite(in2R, HIGH);
  digitalWrite(in1L, HIGH); digitalWrite(in2L, LOW);
  analogWrite(enR, speed);
  analogWrite(enL, speed);
}
